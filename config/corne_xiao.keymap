/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define COMBO_TIMEOUT 60
#define DEF 0
#define ONE 1
#define TWO 2
#define THR 3
#define FOU 4
#define FIV 5
#define SIX 6

&lt {
    tapping-term-ms = <160>;
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_copy {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <21 22>;
            bindings = <&kp LC(C)>;
        };

        combo_paste {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <22 23>;
            bindings = <&kp LC(V)>;
        };

        combo_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
        };

        combo_f18 {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <27 28>;
            bindings = <&kp F18>;
        };
    };
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <120>;
            quick-tap-ms = <100>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        // |----------------------------------------------------------------------------------------------------------------------------------------------------------------|
        // |      Q      |      W      |      E      |      R      |      T      |                    |      Y      |      U      |      I      |      O      |      P      |
        // |      A      |      S      |      D      |      F      |      G      |                    |      H      |      J      |      K      |      L      |      '      |
        // |      Z      |      X      |      C      |      V      |      B      |                    |      N      |      M      |      ,      |      .      |      /      |
        // |                           |     ESC     |    SPACE    |     TAB     |                    |     RET     |    BSPC     |     DEL     |                           |
        // |----------------------------------------------------------------------------------------------------------------------------------------------------------------|

        default_layer {
            bindings = <
  &kp Q       &kp W       &kp E        &kp R        &kp T      &kp Y  &kp U        &kp I        &kp O       &kp P
  &hm LGUI A  &hm LALT S  &hm LCTRL D  &hm LSHFT F  &kp G      &kp H  &hm RSHFT J  &hm RCTRL K  &hm RALT L  &hm RGUI SEMI
  &kp Z       &kp X       &kp C        &kp V        &kp B      &kp N  &kp M        &kp COMMA    &kp DOT     &kp FSLH
                          &lt 1 ESC    &lt 2 SPACE  &lt 3 TAB         &lt 4 RET    &lt 5 BSPC   &lt 6 DEL
            >;
        };

        control {
            bindings = <
  &none         &none         &out OUT_USB  &out OUT_BLE  &out OUT_TOG    &out OUT_TOG    &out OUT_BLE  &out OUT_USB  &none         &none
  &none         &none         &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE      &kp C_MUTE      &kp C_VOL_DN  &kp C_VOL_UP  &none         &none
  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR_ALL  &bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
                              &none         &none         &none                           &none         &none         &none
            >;
        };

        navigation {
            bindings = <
  &none     &none     &none      &none      &none  &none     &kp END    &kp HOME   &none            &none
  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT        &none
  &none     &none     &none      &none      &none  &none     &kp PG_DN  &kp PG_UP  &none            &none
                      &none      &none      &none            &kp CAPS   &kp INS    &kp PAUSE_BREAK
            >;
        };

        function {
            bindings = <
  &none     &none     &none      &none      &none  &none  &kp F7  &kp F8  &kp F9  &kp F10
  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none  &none  &kp F4  &kp F5  &kp F6  &kp F11
  &none     &none     &none      &none      &none  &none  &kp F1  &kp F2  &kp F3  &kp F12
                      &none      &none      &none         &none   &none   &none
            >;
        };

        symbol {
            bindings = <
  &kp LPAR   &kp AMPS  &kp STAR   &kp GRAVE  &kp RPAR   &none  &none      &none      &none     &none
  &kp LBKT   &kp DLLR  &kp PRCNT  &kp CARET  &kp RBKT   &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
  &kp MINUS  &kp EXCL  &kp AT     &kp HASH   &kp EQUAL  &none  &none      &none      &none     &none
                       &kp BSLH   &kp DQT    &kp SQT           &none      &none      &none
            >;
        };

        number {
            bindings = <
  &none  &kp N7  &kp N8  &kp N9  &kp N0  &none  &none      &none      &none     &none
  &none  &kp N4  &kp N5  &kp N6  &none   &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
  &none  &kp N1  &kp N2  &kp N3  &none   &none  &none      &none      &none     &none
                 &none   &none   &none          &none      &none      &none
            >;
        };

        mouse {
            bindings = <
  &none     &none     &none      &none      &none  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none
  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none
  &none     &none     &none      &none      &none  &mkp MB4        &mkp LCLK       &mkp MCLK     &mkp RCLK        &mkp MB5
                      &none      &none      &none                  &none           &none         &none
            >;
        };
    };
};
